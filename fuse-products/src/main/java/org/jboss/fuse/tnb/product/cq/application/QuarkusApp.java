package org.jboss.fuse.tnb.product.cq.application;

import org.jboss.fuse.tnb.common.config.OpenshiftConfiguration;
import org.jboss.fuse.tnb.common.config.TestConfiguration;
import org.jboss.fuse.tnb.product.application.App;
import org.jboss.fuse.tnb.product.integration.IntegrationBuilder;
import org.jboss.fuse.tnb.product.integration.IntegrationGenerator;
import org.jboss.fuse.tnb.product.util.maven.BuildRequest;
import org.jboss.fuse.tnb.product.util.maven.Maven;

import org.apache.maven.model.Dependency;
import org.apache.maven.model.Model;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public abstract class QuarkusApp extends App {
    private static final Logger LOG = LoggerFactory.getLogger(QuarkusApp.class);

    public QuarkusApp(IntegrationBuilder integrationBuilder) {
        super(integrationBuilder.getIntegrationName());
        LOG.info("Creating Camel Quarkus application project for integration {}", name);

        Maven.invoke(new BuildRequest.Builder()
            .withBaseDirectory(TestConfiguration.appLocation())
            .withGoals("io.quarkus:quarkus-maven-plugin:" + TestConfiguration.quarkusVersion() + ":create")
            .withProperties(Map.of(
                "projectGroupId", TestConfiguration.appGroupId(),
                "projectArtifactId", name,
                "extensions", OpenshiftConfiguration.isOpenshift() ? "openshift" : ""
            ))
            .build()
        );

        customizeProject(integrationBuilder.getDependencies());

        IntegrationGenerator.toFile(integrationBuilder, TestConfiguration.appLocation().resolve(name));

        BuildRequest.Builder requestBuilder = new BuildRequest.Builder()
            .withBaseDirectory(TestConfiguration.appLocation().resolve(name))
            .withGoals("clean", "package")
            .withProperties(Map.of(
                "skipTests", "true",
                "quarkus.native.container-build", "true"
            ));
        if (TestConfiguration.isQuarkusNative()) {
            requestBuilder.withProfiles("native");
        }

        LOG.info("Building {} application project ({})", name, TestConfiguration.isQuarkusNative() ? "native" : "JVM");
        Maven.invoke(requestBuilder.build());
    }

    /**
     * Customizes the project generated by quarkus mvn plugin to TNB app needs.
     *
     * @param dependencies dependencies to add to the project
     */
    private void customizeProject(List<String> dependencies) {
        // Remove the GreetingResource.java file that is not used
        final File greetingResource = TestConfiguration.appLocation().resolve(name).resolve("src/main/java/com/test/GreetingResource.java").toFile();
        if (greetingResource.exists()) {
            greetingResource.delete();
        }

        File pom = TestConfiguration.appLocation().resolve(name).resolve("pom.xml").toFile();
        Model model = Maven.loadPom(pom);

        // Switch to camel-quarkus-bom
        List<Dependency> boms = new ArrayList<>();
        // For productized build, we need to also add redhat quarkus bom
        if (TestConfiguration.camelQuarkusVersion().contains("redhat")) {
            Dependency redhatQuarkusBom = new Dependency();
            redhatQuarkusBom.setGroupId("com.redhat.quarkus");
            redhatQuarkusBom.setArtifactId("quarkus-product-bom");
            redhatQuarkusBom.setVersion(TestConfiguration.quarkusProductBomVersion());
            redhatQuarkusBom.setType("pom");
            redhatQuarkusBom.setScope("import");
            boms.add(redhatQuarkusBom);
        }
        Dependency camelQuarkusBom = new Dependency();
        camelQuarkusBom.setGroupId("org.apache.camel.quarkus");
        camelQuarkusBom.setArtifactId("camel-quarkus-bom");
        camelQuarkusBom.setVersion(TestConfiguration.camelQuarkusVersion());
        camelQuarkusBom.setType("pom");
        camelQuarkusBom.setScope("import");
        boms.add(camelQuarkusBom);
        model.getDependencyManagement().setDependencies(boms);

        if (!OpenshiftConfiguration.isOpenshift()) {
            // quarkus-resteasy is needed for the openshift.yml to be generated, but the resteasy itself is not used anywhere
            // remove quarkus-resteasy in local deployments as it can throw exceptions for occupied 8080 port
            model.setDependencies(
                model.getDependencies().stream().filter(d -> !"quarkus-resteasy".equals(d.getArtifactId())).collect(Collectors.toList())
            );
        }

        dependencies.forEach(dep -> model.getDependencies().add(Maven.toDependency(dep)));

        Maven.writePom(pom, model);
    }
}

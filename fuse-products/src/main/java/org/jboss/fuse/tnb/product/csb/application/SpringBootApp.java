package org.jboss.fuse.tnb.product.csb.application;

import org.jboss.fuse.tnb.common.config.OpenshiftConfiguration;
import org.jboss.fuse.tnb.common.config.SpringBootConfiguration;
import org.jboss.fuse.tnb.common.config.TestConfiguration;
import org.jboss.fuse.tnb.product.application.App;
import org.jboss.fuse.tnb.product.integration.IntegrationBuilder;
import org.jboss.fuse.tnb.product.integration.IntegrationGenerator;
import org.jboss.fuse.tnb.product.util.maven.BuildRequest;
import org.jboss.fuse.tnb.product.util.maven.Maven;

import org.apache.maven.model.Model;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.util.List;
import java.util.Map;

public abstract class SpringBootApp extends App {
    private static final Logger LOG = LoggerFactory.getLogger(SpringBootApp.class);
    private final boolean isProd = SpringBootConfiguration.camelSpringBootVersion().contains("redhat");

    public SpringBootApp(IntegrationBuilder integrationBuilder) {
        super(integrationBuilder.getIntegrationName());
        LOG.info("Creating Camel Spring Boot application project for integration {}", name);

        Maven.invoke(new BuildRequest.Builder()
            .withBaseDirectory(TestConfiguration.appLocation())
            .withGoals("archetype:generate")
            .withProperties(Map.of(
                "archetypeGroupId", SpringBootConfiguration.camelSpringBootArchetypeGroupId(),
                "archetypeArtifactId", SpringBootConfiguration.camelSpringBootArchetypeArtifactId(),
                "archetypeVersion", SpringBootConfiguration.camelSpringBootArchetypeVersion(),
                "groupId", TestConfiguration.appGroupId(),
                "artifactId", name,
                "version", "1.0.0-SNAPSHOT",
                "package", TestConfiguration.appGroupId(),
                "maven-compiler-plugin-version", SpringBootConfiguration.mavenCompilerPluginVersion(),
                "spring-boot-version", SpringBootConfiguration.springBootVersion(),
                "camel-version", SpringBootConfiguration.camelSpringBootVersion()))
            .withLogFile(TestConfiguration.appLocation().resolve(name + "-generate.log"))
            .build());

        IntegrationGenerator.toFile(integrationBuilder, TestConfiguration.appLocation().resolve(name));

        customizeProject(integrationBuilder.getDependencies());

        BuildRequest.Builder requestBuilder = new BuildRequest.Builder()
            .withBaseDirectory(TestConfiguration.appLocation().resolve(name))
            .withGoals("clean", "package")
            .withProperties(Map.of(
                "skipTests", "true"
            ))
            .withLogFile(TestConfiguration.appLocation().resolve(name + "-build.log"));

        if (OpenshiftConfiguration.isOpenshift()) {
            requestBuilder.withProperties(Map.of(
                "skipTests", "true"
                , "openshift-maven-plugin-version", SpringBootConfiguration.openshiftMavenPluginVersion()
                , "openshift-maven-plugin-group-id", SpringBootConfiguration.openshiftMavenPluginGroupId()
            ));
            requestBuilder.withGoals("clean", "package", "oc:resource");
            requestBuilder.withProfiles("openshift");
        }

        LOG.info("Building {} application project", name);
        Maven.invoke(requestBuilder.build());
    }

    /**
     * Customizes the project generated by spring boot mvn archetype to TNB app needs.
     *
     * @param dependencies dependencies to add to the project
     */
    private void customizeProject(List<String> dependencies) {
        File pom = TestConfiguration.appLocation().resolve(name).resolve("pom.xml").toFile();
        Model model = Maven.loadPom(pom);

        dependencies.forEach(dep -> model.getDependencies().add(Maven.toDependency(dep)));

        Maven.writePom(pom, model);
    }
}
